<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!--配置bean-->
	<!--在启动容器的时候，spring调用该类的无参构造器创建对象，并调用该对象的set方法初始化属性-->
	<!--
		class:bean的全类名，通过反射的方式在IOC容器中创建Bean,所以要求bean中必须有无参构造器
		id:标识容器中的bean，id唯一
	-->
	<!--1.通过set方法初始化属性-->
	<bean id="helloWorld" class="com.david.spring4.helloworld.beans.HelloWorld">
		<property name="name" value="DAVID"></property>
	</bean>
	<!--2.通过构造器的方式初始化属性-->
	<!--2.1指定构造器的参数顺序的方式-->
	<bean id="car1" class="com.david.spring4.helloworld.beans.Car">
		<constructor-arg value="大众" index="0"></constructor-arg>
		<constructor-arg value="奥迪" index="1"></constructor-arg>
		<constructor-arg value="240" index="2"></constructor-arg>
	</bean>
	<!--2.2指定构造器的参数类型的方式-->
	<bean id="car2" class="com.david.spring4.helloworld.beans.Car">
		<constructor-arg value="大众" type="java.lang.String"></constructor-arg>
		<constructor-arg value="奥迪" type="java.lang.String"></constructor-arg>
		<constructor-arg value="200000.00" type="float"></constructor-arg>
	</bean>
	<bean id="car3" class="com.david.spring4.helloworld.beans.Car">
		<!--字面值可以使用 value标签设置，如果包含特殊字符使用  <![CDATA[]]>包裹起来-->
		<constructor-arg  type="java.lang.String">
			<value><![CDATA[<NULL/>]]></value>
		</constructor-arg>
		<constructor-arg value="奥迪" type="java.lang.String"></constructor-arg>
		<constructor-arg value="200000.00" type="float"></constructor-arg>
	</bean>
	<!--引用其它bean的方式-->
	<bean id="person" class="com.david.spring4.helloworld.beans.Person">
		<property name="name" value="David"></property>
		<property name="age" value="25"></property>
		<!--可以使用property的ref属性建立bean之间的引用关系-->
		<property name="car" ref="car2"></property>
	</bean>
	<bean id="person2" class="com.david.spring4.helloworld.beans.Person">
		<property name="name" value="David"></property>
		<property name="age" value="25"></property>
		<!--可以使用property的ref子节点建立bean之间的引用关系-->
		<property name="car" >
			<ref bean="car2"/>
		</property>
	</bean>
	
	<!--使用内部bean的方式-->
	<bean id="person3" class="com.david.spring4.helloworld.beans.Person">
		<property name="name" value="David"></property>
		<property name="age" value="25"></property>
		<!--可以使用内部bean建立bean之间的引用关系-->
		<property name="car">
			<!--注意：此内部bean不能被外部使用，只能在内部使用，所以没必要配置id了-->
			<bean class="com.david.spring4.helloworld.beans.Car">
				<constructor-arg value="大众"></constructor-arg>
				<constructor-arg value="benz"></constructor-arg>
				<constructor-arg value="500000.0"></constructor-arg>
			</bean>
		</property>
	</bean>
	<!--构造器引用外部bean的方式-->
	<bean id="person4" class="com.david.spring4.helloworld.beans.Person">
		<constructor-arg value="张三"></constructor-arg>
		<constructor-arg value="20"></constructor-arg>
		<constructor-arg ref="car2"></constructor-arg>
		<!-- 
			可以使用<null/>标签给属性赋值null,不过意义不大，引用类型默认就是null
		 -->
		<!-- <constructor-arg><null/></constructor-arg> -->
	</bean>
	<!--构造器引用内部bean的方式-->
	<bean id="person5" class="com.david.spring4.helloworld.beans.Person">
		<constructor-arg value="李四"></constructor-arg>
		<constructor-arg value="22"></constructor-arg>
		<constructor-arg>
			<bean class="com.david.spring4.helloworld.beans.Car">
				<constructor-arg value="大众"></constructor-arg>
				<constructor-arg value="benz"></constructor-arg>
				<constructor-arg value="500000.0"></constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
	
	<!--级联属性赋值-->
	<bean id="person6" class="com.david.spring4.helloworld.beans.Person">
		<constructor-arg value="张三"></constructor-arg>
		<constructor-arg value="20"></constructor-arg>
		<constructor-arg ref="car2"></constructor-arg>
		<!--注意此处：属性car必须先存在后，才能级联初始化该car的属性，否则会抛出异常，和struts2有区别！-->
		<property name="car.maxSpeed" value="250"></property>
	</bean>
	<!--集合类型List类型属性赋值，set方式类似-->
	<bean id="p1" class="com.david.spring4.helloworld.beans.collections.Person">
		<property name="name" value="david"></property>
		<property name="age" value="29"></property>
		<property name="cars">
			<list>
				<ref bean="car1"/>
				<ref bean="car2"/>
				<ref bean="car3"/>
			</list>
		</property>
	</bean>
	<!--集合类型Map类型属性赋值-->
	<bean id="p2" class="com.david.spring4.helloworld.beans.collections.PersonMap">
		<property name="name" value="david"></property>
		<property name="age" value="29"></property>
		<property name="cars">
			<map>
				<entry key="1st" value-ref="car1"></entry>
				<entry key="2nd" value-ref="car2"></entry>
				<entry key="3rd" value-ref="car3"></entry>
			</map>
		</property>
	</bean>
	<!--使用props和prop节点给properties属性赋值（模拟数据库连接配置）-->
	<bean id="d" class="com.david.spring4.helloworld.beans.collections.DataSource">
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">123456</prop>
				<prop key="url">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!--配置独立的一个集合bean，以便多个bean共同引用,配置文件需要导入util命名空间-->
	<util:list id="carslist">
		<ref bean="car1"/>
		<ref bean="car2"/>
		<ref bean="car3"/>
	</util:list>
	<bean id="p3" class="com.david.spring4.helloworld.beans.collections.Person">
		<property name="name" value="david"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="carslist"></property>
	</bean>
	<!--通过p命名空间给bean属性赋值，需要导入p命名空间 -->
	<bean id="p4" class="com.david.spring4.helloworld.beans.collections.Person" p:age="29"
	p:name="DDDD" p:cars-ref="carslist"
	></bean>
	
</beans>
